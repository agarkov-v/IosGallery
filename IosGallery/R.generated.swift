//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `AccountSettings`.
    static let accountSettings = _R.storyboard.accountSettings()
    /// Storyboard `Account`.
    static let account = _R.storyboard.account()
    /// Storyboard `Detail`.
    static let detail = _R.storyboard.detail()
    /// Storyboard `Gallery`.
    static let gallery = _R.storyboard.gallery()
    /// Storyboard `Import`.
    static let `import` = _R.storyboard.`import`()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Account", bundle: ...)`
    static func account(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.account)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AccountSettings", bundle: ...)`
    static func accountSettings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountSettings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Detail", bundle: ...)`
    static func detail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Gallery", bundle: ...)`
    static func gallery(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gallery)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Import", bundle: ...)`
    static func `import`(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.`import`)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `blackWhite`.
    static let blackWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "blackWhite")
    /// Color `darkDark`.
    static let darkDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkDark")
    /// Color `gray`.
    static let gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray")
    /// Color `inactiveGray`.
    static let inactiveGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "inactiveGray")
    /// Color `pink`.
    static let pink = Rswift.ColorResource(bundle: R.hostingBundle, name: "pink")
    /// Color `placeholderGray`.
    static let placeholderGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "placeholderGray")
    /// Color `tableBaseView`.
    static let tableBaseView = Rswift.ColorResource(bundle: R.hostingBundle, name: "tableBaseView")
    /// Color `whiteDark`.
    static let whiteDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "whiteDark")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blackWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blackWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blackWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "inactiveGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func inactiveGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.inactiveGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "placeholderGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func placeholderGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.placeholderGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tableBaseView", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tableBaseView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tableBaseView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "whiteDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteDark, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `iconDark@2x.png`.
    static let iconDark2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "iconDark@2x", pathExtension: "png")
    /// Resource file `iconDark@3x.png`.
    static let iconDark3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "iconDark@3x", pathExtension: "png")
    /// Resource file `iconDarkIpad.png`.
    static let iconDarkIpadPng = Rswift.FileResource(bundle: R.hostingBundle, name: "iconDarkIpad", pathExtension: "png")
    /// Resource file `iconDarkIpad@2x.png`.
    static let iconDarkIpad2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "iconDarkIpad@2x", pathExtension: "png")
    /// Resource file `iconDarkIpadPro.png`.
    static let iconDarkIpadProPng = Rswift.FileResource(bundle: R.hostingBundle, name: "iconDarkIpadPro", pathExtension: "png")

    /// `bundle.url(forResource: "iconDark@2x", withExtension: "png")`
    static func iconDark2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iconDark2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "iconDark@3x", withExtension: "png")`
    static func iconDark3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iconDark3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "iconDarkIpad", withExtension: "png")`
    static func iconDarkIpadPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iconDarkIpadPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "iconDarkIpad@2x", withExtension: "png")`
    static func iconDarkIpad2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iconDarkIpad2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "iconDarkIpadPro", withExtension: "png")`
    static func iconDarkIpadProPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iconDarkIpadProPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `IconDark2`.
    static let iconDark2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconDark2")
    /// Image `arrowLeft_old`.
    static let arrowLeft_old = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowLeft_old")
    /// Image `arrowLeft`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowLeft")
    /// Image `badConnectionPlaceholder`.
    static let badConnectionPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "badConnectionPlaceholder")
    /// Image `closeIcon`.
    static let closeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeIcon")
    /// Image `eyeIcon_second`.
    static let eyeIcon_second = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeIcon_second")
    /// Image `eyeIcon`.
    static let eyeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeIcon")
    /// Image `gLetter`.
    static let gLetter = Rswift.ImageResource(bundle: R.hostingBundle, name: "gLetter")
    /// Image `iconDarkIpadPro`.
    static let iconDarkIpadPro = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDarkIpadPro")
    /// Image `iconDarkIpad`.
    static let iconDarkIpad = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDarkIpad")
    /// Image `iconDark`.
    static let iconDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDark")
    /// Image `iconPrimary`.
    static let iconPrimary = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPrimary")
    /// Image `notFoundPlaceholder`.
    static let notFoundPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "notFoundPlaceholder")
    /// Image `photoPlaceholder_old`.
    static let photoPlaceholder_old = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoPlaceholder_old")
    /// Image `photoPlaceholder`.
    static let photoPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoPlaceholder")
    /// Image `settingsGear`.
    static let settingsGear = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsGear")
    /// Image `tabBarHome`.
    static let tabBarHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarHome")
    /// Image `tabBarImage`.
    static let tabBarImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarImage")
    /// Image `tabBarPersonal`.
    static let tabBarPersonal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarPersonal")
    /// Image `testPlaceholderBlueSquare`.
    static let testPlaceholderBlueSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "testPlaceholderBlueSquare")
    /// Image `testPlaceholderImage`.
    static let testPlaceholderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "testPlaceholderImage")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconDark2", bundle: ..., traitCollection: ...)`
    static func iconDark2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDark2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowLeft", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowLeft_old", bundle: ..., traitCollection: ...)`
    static func arrowLeft_old(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft_old, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "badConnectionPlaceholder", bundle: ..., traitCollection: ...)`
    static func badConnectionPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badConnectionPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeIcon", bundle: ..., traitCollection: ...)`
    static func closeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeIcon", bundle: ..., traitCollection: ...)`
    static func eyeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeIcon_second", bundle: ..., traitCollection: ...)`
    static func eyeIcon_second(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeIcon_second, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gLetter", bundle: ..., traitCollection: ...)`
    static func gLetter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gLetter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDark", bundle: ..., traitCollection: ...)`
    static func iconDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDarkIpad", bundle: ..., traitCollection: ...)`
    static func iconDarkIpad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDarkIpad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDarkIpadPro", bundle: ..., traitCollection: ...)`
    static func iconDarkIpadPro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDarkIpadPro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPrimary", bundle: ..., traitCollection: ...)`
    static func iconPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notFoundPlaceholder", bundle: ..., traitCollection: ...)`
    static func notFoundPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notFoundPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photoPlaceholder", bundle: ..., traitCollection: ...)`
    static func photoPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photoPlaceholder_old", bundle: ..., traitCollection: ...)`
    static func photoPlaceholder_old(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoPlaceholder_old, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsGear", bundle: ..., traitCollection: ...)`
    static func settingsGear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsGear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarHome", bundle: ..., traitCollection: ...)`
    static func tabBarHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarImage", bundle: ..., traitCollection: ...)`
    static func tabBarImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarPersonal", bundle: ..., traitCollection: ...)`
    static func tabBarPersonal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarPersonal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "testPlaceholderBlueSquare", bundle: ..., traitCollection: ...)`
    static func testPlaceholderBlueSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.testPlaceholderBlueSquare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "testPlaceholderImage", bundle: ..., traitCollection: ...)`
    static func testPlaceholderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.testPlaceholderImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Root"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AccountCell`.
    static let accountCell = _R.nib._AccountCell()
    /// Nib `GalleryCell`.
    static let galleryCell = _R.nib._GalleryCell()
    /// Nib `StubLoadViewController`.
    static let stubLoadViewController = _R.nib._StubLoadViewController()
    /// Nib `StubLoad`.
    static let stubLoad = _R.nib._StubLoad()
    /// Nib `StubView`.
    static let stubView = _R.nib._StubView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountCell) instead")
    static func accountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GalleryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.galleryCell) instead")
    static func galleryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.galleryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StubLoad", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stubLoad) instead")
    static func stubLoad(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stubLoad)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StubLoadViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stubLoadViewController) instead")
    static func stubLoadViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stubLoadViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StubView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stubView) instead")
    static func stubView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stubView)
    }
    #endif

    static func accountCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountCell? {
      return R.nib.accountCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountCell
    }

    static func galleryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GalleryCell? {
      return R.nib.galleryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GalleryCell
    }

    static func stubLoad(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubLoad? {
      return R.nib.stubLoad.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubLoad
    }

    static func stubLoadViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.stubLoadViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func stubView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubView? {
      return R.nib.stubView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `accountCell`.
    static let accountCell: Rswift.ReuseIdentifier<AccountCell> = Rswift.ReuseIdentifier(identifier: "accountCell")
    /// Reuse identifier `galleryCell`.
    static let galleryCell: Rswift.ReuseIdentifier<GalleryCell> = Rswift.ReuseIdentifier(identifier: "galleryCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      /// en translation: IosGallery
      ///
      /// Locales: ru, en
      static let qyTrS4MText = Rswift.StringResource(key: "0QY-Tr-s4M.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)

      /// en translation: IosGallery
      ///
      /// Locales: ru, en
      static func qyTrS4MText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0QY-Tr-s4M.text", tableName: "LaunchScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LaunchScreen", preferredLanguages: preferredLanguages) else {
          return "0QY-Tr-s4M.text"
        }

        return NSLocalizedString("0QY-Tr-s4M.text", tableName: "LaunchScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 51 localization keys.
    struct localizable {
      /// en translation: Account Gallery
      ///
      /// Locales: ru, en
      static let accountGallery = Rswift.StringResource(key: "Account Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: ru, en
      static let add = Rswift.StringResource(key: "Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Authorization error, please try again
      ///
      /// Locales: ru, en
      static let authorizationErrorPleaseTryAgain = Rswift.StringResource(key: "Authorization error, please try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Bad connection. Please check your connection and reload the page.
      ///
      /// Locales: ru, en
      static let badConnectionPleaseCheckYourConnectionAndReloadThePage = Rswift.StringResource(key: "Bad connection. Please check your connection and reload the page.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: ru, en
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ru, en
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Choose image from
      ///
      /// Locales: ru, en
      static let chooseImageFrom = Rswift.StringResource(key: "Choose image from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Color mode:
      ///
      /// Locales: ru, en
      static let colorMode = Rswift.StringResource(key: "Color mode:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: ru, en
      static let confirmPassword = Rswift.StringResource(key: "Confirm password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: ru, en
      static let `continue` = Rswift.StringResource(key: "Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Dark
      ///
      /// Locales: ru, en
      static let dark = Rswift.StringResource(key: "Dark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Dark app icon:
      ///
      /// Locales: ru, en
      static let darkAppIcon = Rswift.StringResource(key: "Dark app icon:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Date of birth
      ///
      /// Locales: ru, en
      static let dateOfBirth = Rswift.StringResource(key: "Date of birth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: ru, en
      static let description = Rswift.StringResource(key: "Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: ru, en
      static let eMail = Rswift.StringResource(key: "E-mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: E-mail adress
      ///
      /// Locales: ru, en
      static let eMailAdress = Rswift.StringResource(key: "E-mail adress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: ru, en
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Fields must not be empty
      ///
      /// Locales: ru, en
      static let fieldsMustNotBeEmpty = Rswift.StringResource(key: "Fields must not be empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: ru, en
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Image Detail
      ///
      /// Locales: ru, en
      static let imageDetail = Rswift.StringResource(key: "Image Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Image processing error
      ///
      /// Locales: ru, en
      static let imageProcessingError = Rswift.StringResource(key: "Image processing error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Invalid username or password
      ///
      /// Locales: ru, en
      static let invalidUsernameOrPassword = Rswift.StringResource(key: "Invalid username or password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: ru, en
      static let light = Rswift.StringResource(key: "Light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Loading...
      ///
      /// Locales: ru, en
      static let loading = Rswift.StringResource(key: "Loading...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: ru, en
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: New
      ///
      /// Locales: ru, en
      static let new = Rswift.StringResource(key: "New", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: New password
      ///
      /// Locales: ru, en
      static let newPassword = Rswift.StringResource(key: "New password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Nothing found.
      ///
      /// Locales: ru, en
      static let nothingFound = Rswift.StringResource(key: "Nothing found.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: ru, en
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Old password
      ///
      /// Locales: ru, en
      static let oldPassword = Rswift.StringResource(key: "Old password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Oops!
      ///
      /// Locales: ru, en
      static let oops = Rswift.StringResource(key: "Oops!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Personal data
      ///
      /// Locales: ru, en
      static let personalData = Rswift.StringResource(key: "Personal data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Photo library
      ///
      /// Locales: ru, en
      static let photoLibrary = Rswift.StringResource(key: "Photo library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Popular
      ///
      /// Locales: ru, en
      static let popular = Rswift.StringResource(key: "Popular", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: ru, en
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: ru, en
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: ru, en
      static let signIn = Rswift.StringResource(key: "Sign In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Sign Out
      ///
      /// Locales: ru, en
      static let signOut = Rswift.StringResource(key: "Sign Out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Sorry!
      ///
      /// Locales: ru, en
      static let sorry = Rswift.StringResource(key: "Sorry!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: System
      ///
      /// Locales: ru, en
      static let system = Rswift.StringResource(key: "System", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Tap on screen to close
      ///
      /// Locales: ru, en
      static let tapOnScreenToClose = Rswift.StringResource(key: "Tap on screen to close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: There is no pictures yet
      ///
      /// Locales: en
      static let thereIsNoPicturesYet = Rswift.StringResource(key: "There is no pictures yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This app wants to use your camera
      ///
      /// Locales: ru, en
      static let thisAppWantsToUseYourCamera = Rswift.StringResource(key: "This app wants to use your camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: This app wants to use your photo libraru
      ///
      /// Locales: ru, en
      static let thisAppWantsToUseYourPhotoLibraru = Rswift.StringResource(key: "This app wants to use your photo libraru", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Upload Image
      ///
      /// Locales: ru, en
      static let uploadImage = Rswift.StringResource(key: "Upload Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: User data error, please try again
      ///
      /// Locales: ru, en
      static let userDataErrorPleaseTryAgain = Rswift.StringResource(key: "User data error, please try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: User name
      ///
      /// Locales: ru, en
      static let userName = Rswift.StringResource(key: "User name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: ru, en
      static let warning = Rswift.StringResource(key: "Warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: ru, en
      static let welcome = Rswift.StringResource(key: "Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Wow!
      ///
      /// Locales: ru, en
      static let wow = Rswift.StringResource(key: "Wow!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: login
      ///
      /// Locales: ru, en
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)

      /// en translation: Account Gallery
      ///
      /// Locales: ru, en
      static func accountGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Account Gallery"
        }

        return NSLocalizedString("Account Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: ru, en
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add"
        }

        return NSLocalizedString("Add", bundle: bundle, comment: "")
      }

      /// en translation: Authorization error, please try again
      ///
      /// Locales: ru, en
      static func authorizationErrorPleaseTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Authorization error, please try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Authorization error, please try again"
        }

        return NSLocalizedString("Authorization error, please try again", bundle: bundle, comment: "")
      }

      /// en translation: Bad connection. Please check your connection and reload the page.
      ///
      /// Locales: ru, en
      static func badConnectionPleaseCheckYourConnectionAndReloadThePage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bad connection. Please check your connection and reload the page.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bad connection. Please check your connection and reload the page."
        }

        return NSLocalizedString("Bad connection. Please check your connection and reload the page.", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: ru, en
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ru, en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Choose image from
      ///
      /// Locales: ru, en
      static func chooseImageFrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose image from", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose image from"
        }

        return NSLocalizedString("Choose image from", bundle: bundle, comment: "")
      }

      /// en translation: Color mode:
      ///
      /// Locales: ru, en
      static func colorMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Color mode:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Color mode:"
        }

        return NSLocalizedString("Color mode:", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: ru, en
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm password"
        }

        return NSLocalizedString("Confirm password", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: ru, en
      static func `continue`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Continue"
        }

        return NSLocalizedString("Continue", bundle: bundle, comment: "")
      }

      /// en translation: Dark
      ///
      /// Locales: ru, en
      static func dark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dark"
        }

        return NSLocalizedString("Dark", bundle: bundle, comment: "")
      }

      /// en translation: Dark app icon:
      ///
      /// Locales: ru, en
      static func darkAppIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dark app icon:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dark app icon:"
        }

        return NSLocalizedString("Dark app icon:", bundle: bundle, comment: "")
      }

      /// en translation: Date of birth
      ///
      /// Locales: ru, en
      static func dateOfBirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Date of birth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Date of birth"
        }

        return NSLocalizedString("Date of birth", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: ru, en
      static func description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Description"
        }

        return NSLocalizedString("Description", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: ru, en
      static func eMail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("E-mail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "E-mail"
        }

        return NSLocalizedString("E-mail", bundle: bundle, comment: "")
      }

      /// en translation: E-mail adress
      ///
      /// Locales: ru, en
      static func eMailAdress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("E-mail adress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "E-mail adress"
        }

        return NSLocalizedString("E-mail adress", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: ru, en
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error"
        }

        return NSLocalizedString("Error", bundle: bundle, comment: "")
      }

      /// en translation: Fields must not be empty
      ///
      /// Locales: ru, en
      static func fieldsMustNotBeEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fields must not be empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fields must not be empty"
        }

        return NSLocalizedString("Fields must not be empty", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: ru, en
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery"
        }

        return NSLocalizedString("Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Image Detail
      ///
      /// Locales: ru, en
      static func imageDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image Detail"
        }

        return NSLocalizedString("Image Detail", bundle: bundle, comment: "")
      }

      /// en translation: Image processing error
      ///
      /// Locales: ru, en
      static func imageProcessingError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image processing error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image processing error"
        }

        return NSLocalizedString("Image processing error", bundle: bundle, comment: "")
      }

      /// en translation: Invalid username or password
      ///
      /// Locales: ru, en
      static func invalidUsernameOrPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid username or password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid username or password"
        }

        return NSLocalizedString("Invalid username or password", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: ru, en
      static func light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Light"
        }

        return NSLocalizedString("Light", bundle: bundle, comment: "")
      }

      /// en translation: Loading...
      ///
      /// Locales: ru, en
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading..."
        }

        return NSLocalizedString("Loading...", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: ru, en
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: ru, en
      static func new(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New"
        }

        return NSLocalizedString("New", bundle: bundle, comment: "")
      }

      /// en translation: New password
      ///
      /// Locales: ru, en
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New password"
        }

        return NSLocalizedString("New password", bundle: bundle, comment: "")
      }

      /// en translation: Nothing found.
      ///
      /// Locales: ru, en
      static func nothingFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nothing found.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Nothing found."
        }

        return NSLocalizedString("Nothing found.", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: ru, en
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ok"
        }

        return NSLocalizedString("Ok", bundle: bundle, comment: "")
      }

      /// en translation: Old password
      ///
      /// Locales: ru, en
      static func oldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Old password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Old password"
        }

        return NSLocalizedString("Old password", bundle: bundle, comment: "")
      }

      /// en translation: Oops!
      ///
      /// Locales: ru, en
      static func oops(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oops!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Oops!"
        }

        return NSLocalizedString("Oops!", bundle: bundle, comment: "")
      }

      /// en translation: Personal data
      ///
      /// Locales: ru, en
      static func personalData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Personal data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Personal data"
        }

        return NSLocalizedString("Personal data", bundle: bundle, comment: "")
      }

      /// en translation: Photo library
      ///
      /// Locales: ru, en
      static func photoLibrary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Photo library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Photo library"
        }

        return NSLocalizedString("Photo library", bundle: bundle, comment: "")
      }

      /// en translation: Popular
      ///
      /// Locales: ru, en
      static func popular(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Popular", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Popular"
        }

        return NSLocalizedString("Popular", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: ru, en
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: ru, en
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: ru, en
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign In", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign In"
        }

        return NSLocalizedString("Sign In", bundle: bundle, comment: "")
      }

      /// en translation: Sign Out
      ///
      /// Locales: ru, en
      static func signOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign Out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign Out"
        }

        return NSLocalizedString("Sign Out", bundle: bundle, comment: "")
      }

      /// en translation: Sorry!
      ///
      /// Locales: ru, en
      static func sorry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry!"
        }

        return NSLocalizedString("Sorry!", bundle: bundle, comment: "")
      }

      /// en translation: System
      ///
      /// Locales: ru, en
      static func system(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("System", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "System"
        }

        return NSLocalizedString("System", bundle: bundle, comment: "")
      }

      /// en translation: Tap on screen to close
      ///
      /// Locales: ru, en
      static func tapOnScreenToClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tap on screen to close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tap on screen to close"
        }

        return NSLocalizedString("Tap on screen to close", bundle: bundle, comment: "")
      }

      /// en translation: There is no pictures yet
      ///
      /// Locales: en
      static func thereIsNoPicturesYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is no pictures yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is no pictures yet"
        }

        return NSLocalizedString("There is no pictures yet", bundle: bundle, comment: "")
      }

      /// en translation: This app wants to use your camera
      ///
      /// Locales: ru, en
      static func thisAppWantsToUseYourCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This app wants to use your camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This app wants to use your camera"
        }

        return NSLocalizedString("This app wants to use your camera", bundle: bundle, comment: "")
      }

      /// en translation: This app wants to use your photo libraru
      ///
      /// Locales: ru, en
      static func thisAppWantsToUseYourPhotoLibraru(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This app wants to use your photo libraru", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This app wants to use your photo libraru"
        }

        return NSLocalizedString("This app wants to use your photo libraru", bundle: bundle, comment: "")
      }

      /// en translation: Upload Image
      ///
      /// Locales: ru, en
      static func uploadImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upload Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Upload Image"
        }

        return NSLocalizedString("Upload Image", bundle: bundle, comment: "")
      }

      /// en translation: User data error, please try again
      ///
      /// Locales: ru, en
      static func userDataErrorPleaseTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User data error, please try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User data error, please try again"
        }

        return NSLocalizedString("User data error, please try again", bundle: bundle, comment: "")
      }

      /// en translation: User name
      ///
      /// Locales: ru, en
      static func userName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User name"
        }

        return NSLocalizedString("User name", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: ru, en
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Warning"
        }

        return NSLocalizedString("Warning", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: ru, en
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome"
        }

        return NSLocalizedString("Welcome", bundle: bundle, comment: "")
      }

      /// en translation: Wow!
      ///
      /// Locales: ru, en
      static func wow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wow!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wow!"
        }

        return NSLocalizedString("Wow!", bundle: bundle, comment: "")
      }

      /// en translation: login
      ///
      /// Locales: ru, en
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AccountCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AccountCell

      let bundle = R.hostingBundle
      let identifier = "accountCell"
      let name = "AccountCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountCell
      }

      fileprivate init() {}
    }

    struct _GalleryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GalleryCell

      let bundle = R.hostingBundle
      let identifier = "galleryCell"
      let name = "GalleryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GalleryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GalleryCell
      }

      fileprivate init() {}
    }

    struct _StubLoad: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StubLoad"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubLoad? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubLoad
      }

      fileprivate init() {}
    }

    struct _StubLoadViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StubLoadViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _StubView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StubView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try account.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try accountSettings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try detail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try gallery.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try `import`.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try root.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct `import`: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let importVC = StoryboardViewControllerResource<ImportViewController>(identifier: "ImportVC")
      let name = "Import"

      func importVC(_: Void = ()) -> ImportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: importVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "photoPlaceholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photoPlaceholder' is used in storyboard 'Import', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkDark' is used in storyboard 'Import', but couldn't be loaded.") }
          if UIKit.UIColor(named: "placeholderGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'placeholderGray' is used in storyboard 'Import', but couldn't be loaded.") }
        }
        if _R.storyboard.`import`().importVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'importVC' could not be loaded from storyboard 'Import' as 'ImportViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct account: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountVC = StoryboardViewControllerResource<AccountViewController>(identifier: "accountVC")
      let bundle = R.hostingBundle
      let name = "Account"

      func accountVC(_: Void = ()) -> AccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkDark' is used in storyboard 'Account', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray' is used in storyboard 'Account', but couldn't be loaded.") }
          if UIKit.UIColor(named: "inactiveGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'inactiveGray' is used in storyboard 'Account', but couldn't be loaded.") }
        }
        if _R.storyboard.account().accountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountVC' could not be loaded from storyboard 'Account' as 'AccountViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct accountSettings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountSettingsVC = StoryboardViewControllerResource<AccountSettingsViewController>(identifier: "AccountSettingsVC")
      let bundle = R.hostingBundle
      let name = "AccountSettings"

      func accountSettingsVC(_: Void = ()) -> AccountSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountSettingsVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkDark' is used in storyboard 'AccountSettings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "pink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'pink' is used in storyboard 'AccountSettings', but couldn't be loaded.") }
        }
        if _R.storyboard.accountSettings().accountSettingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountSettingsVC' could not be loaded from storyboard 'AccountSettings' as 'AccountSettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct detail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailVC = StoryboardViewControllerResource<DetailViewController>(identifier: "DetailVC")
      let name = "Detail"

      func detailVC(_: Void = ()) -> DetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkDark' is used in storyboard 'Detail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "inactiveGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'inactiveGray' is used in storyboard 'Detail', but couldn't be loaded.") }
        }
        if _R.storyboard.detail().detailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailVC' could not be loaded from storyboard 'Detail' as 'DetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct gallery: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let galleryVC = StoryboardViewControllerResource<GalleryViewController>(identifier: "galleryVC")
      let name = "Gallery"

      func galleryVC(_: Void = ()) -> GalleryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: galleryVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkDark' is used in storyboard 'Gallery', but couldn't be loaded.") }
        }
        if _R.storyboard.gallery().galleryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'galleryVC' could not be loaded from storyboard 'Gallery' as 'GalleryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "gLetter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gLetter' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkDark' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "whiteDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'whiteDark' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let bundle = R.hostingBundle
      let loginVC = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginVC")
      let name = "Login"

      func loginVC(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "gLetter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gLetter' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkDark' is used in storyboard 'Login', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white-dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white-dark' is used in storyboard 'Login', but couldn't be loaded.") }
        }
        if _R.storyboard.login().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController

      let bundle = R.hostingBundle
      let name = "Root"
      let rootVC = StoryboardViewControllerResource<RootViewController>(identifier: "RootVC")

      func rootVC(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tabBarHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarHome' is used in storyboard 'Root', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarImage' is used in storyboard 'Root', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarPersonal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarPersonal' is used in storyboard 'Root', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "inactiveGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'inactiveGray' is used in storyboard 'Root', but couldn't be loaded.") }
          if UIKit.UIColor(named: "pink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'pink' is used in storyboard 'Root', but couldn't be loaded.") }
        }
        if _R.storyboard.root().rootVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootVC' could not be loaded from storyboard 'Root' as 'RootViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
